"""Add CFDI history table.

Revision ID: 4b5f455a555c Revises: 1a1a1a1a1a1a Create Date: 2025-03-31 11:46:45.812972
"""

import sqlalchemy as sa
from sqlalchemy import inspect

from alembic import op

# revision identifiers, used by Alembic.
revision = "4b5f455a555c"
down_revision = "1a1a1a1a1a1a"
branch_labels = None
depends_on = None


def table_exists(table_name):
    """Check if a table exists in the database."""
    inspector = inspect(op.get_bind())
    return table_name in inspector.get_table_names()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists("users"):
        op.create_table(
            "users",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(), nullable=True),
            sa.Column("email", sa.String(), nullable=True),
            sa.Column("is_active", sa.Boolean(), nullable=True),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
                nullable=True,
            ),
            sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
        op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)

    # Use batch operations for SQLite to add user_id to api_tokens
    if not table_exists("api_tokens") or "user_id" not in [
        c["name"] for c in inspect(op.get_bind()).get_columns("api_tokens")
    ]:
        with op.batch_alter_table("api_tokens") as batch_op:
            batch_op.add_column(sa.Column("user_id", sa.Integer(), nullable=True))
            batch_op.create_foreign_key("fk_user_id", "users", ["user_id"], ["id"])

    # Add CFDI history table
    if not table_exists("cfdi_history"):
        op.create_table(
            "cfdi_history",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("uuid", sa.String(), nullable=False),
            sa.Column("emisor_rfc", sa.String(), nullable=False),
            sa.Column("receptor_rfc", sa.String(), nullable=False),
            sa.Column("total", sa.String(), nullable=False),
            sa.Column("estado", sa.String(), nullable=True),
            sa.Column("es_cancelable", sa.String(), nullable=True),
            sa.Column("estatus_cancelacion", sa.String(), nullable=True),
            sa.Column("codigo_estatus", sa.String(), nullable=True),
            sa.Column("validacion_efos", sa.String(), nullable=True),
            sa.Column("user_id", sa.Integer(), nullable=False),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
                nullable=False,
            ),
            sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(
                ["user_id"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            op.f("ix_cfdi_history_id"), "cfdi_history", ["id"], unique=False
        )
        op.create_index(
            op.f("ix_cfdi_history_uuid"), "cfdi_history", ["uuid"], unique=False
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if table_exists("cfdi_history"):
        op.drop_index(op.f("ix_cfdi_history_uuid"), table_name="cfdi_history")
        op.drop_index(op.f("ix_cfdi_history_id"), table_name="cfdi_history")
        op.drop_table("cfdi_history")

    # Use batch operations for SQLite
    if table_exists("api_tokens") and "user_id" in [
        c["name"] for c in inspect(op.get_bind()).get_columns("api_tokens")
    ]:
        with op.batch_alter_table("api_tokens") as batch_op:
            batch_op.drop_constraint("fk_user_id", type_="foreignkey")
            batch_op.drop_column("user_id")

    if table_exists("users"):
        op.drop_index(op.f("ix_users_id"), table_name="users")
        op.drop_index(op.f("ix_users_email"), table_name="users")
        op.drop_table("users")
    # ### end Alembic commands ###
